== Keyboards ==

Keyboard objects (`kbd()`) are much simpler than fonts. There are a number of attributes associated with a keyboard and they are listed here along with their default values:

source::
	The source file is a Keyman keyboard source file with extension `.kmn`. (Required)

target::
	The target file is the compiled Keyman keyboard and defaults to the source `.kmn` file with kmn replaced as `.kmx`

The following are attributes specific to generating a sample layout of the keyboard:

font::
	Font pathname to use for rendering the layout. This attribute is required if you want to generate keyboard layout documentation. It results
	in the font being copied into the build tree for this project.

fontname::
	Public font name that is used by the OS to reference the font.

fontdir::
	Directory containing the font specified in `font`. This defaults to `kbdfonts`.

kbdfont::
	Full pathname to the local font file copy to use for rendering the layout. By default this is built from the `font` and `fontdir` attributes.
	This attribute is rarely set. Use `font` instead.

fontsize::
	Font size to render glyphs at in the layout, given in pt (18).

modifiers::

	A list of strings which can take a sequence of the following strings, for example 'Ctrl RAlt'

		'';;
			The empty string to indicate no modifier

		Ctrl;;
			Can be modified by L or R as well, as in LCtrl, RCtrl, Ctrl

		Alt;;
			Can be further modified by L or R or Gr, as in Alt, LAlt, RAlt, AltGr (equivalent to RAlt)

		key;;
			This specifies a key that is to be considered pressed before the keytop. This is used
			to document keyboard layouts following a deadkey. For example '[K_BKSLASH]' or '\\' which
			are equivalent.
pdf::
	Filename to put keyboard layout pdf in ('source'.pdf)

svg::
	Intermediate svg format of keyboard layout ('source'.svg)

xml::
	Intermediate xml that represents the basic keystrokes of the keyboard ('source'.xml)

mskbd::
	An object that describes how to create an MS keyboard from the .kmn file.

An example specification of a keyboard object might be:

[source,python]
----
kbd(source = 'mykbd.kmn',
	fontname = 'My Font',
	font = 'results/myfont.ttf')
----

=== mskbd ===

The mskbd object can be used for the mskbd parameter of a keyboard. It automatically generates
a normal MS Keyboard from the .kmn file and compiles it. The dependencies are pretty stiff, but
it does mean that a complete MS solution can be generated without needing to run special GUI
software during the development cycle. The parameters to mskbd() are:

lid::
	Language LCID to store this keyboard under. If not specified, defaults to 0xC00.

lidinstall::
	Specified as a list of language ids to install this keyboard under. E.g. lidinstall=[0x0436].

guid::
	GUID to associate with the keyboard. If not specified a random one is created.

capslockkeys::
	A list of keytops that should have capslock enabled for them. That is capslock will have
	a shift action (and shift will unshift). The keytop characters are:
	abcdefghijklmnopqrstuvwxyz0123456789-=[];',./\`

The following are internal attributes that may be set:

arches::
	List of architectures that may be built for. Currently i586 and amd64. This is unlikely to be set by a user.

source::
	.kmn source file, defaults to keyboard .source attribute

c_file::
	.c file to generate (same as source but with .c extension)

rc_file::
	.rc file to generate (same as source but with .rc extension)

o_file::
	.o file to generate from .c file (same as source but with .o extension)

dll::
	.dll file to create (same as source but with .dll extension)

=== Tests ===

There are currently no automated tests for keyboards, although the generation of the layout can be considered a test.
